package com.lwb.music.provider;import android.content.ContentProvider;import android.content.ContentValues;import android.content.Context;import android.content.UriMatcher;import android.database.Cursor;import android.database.sqlite.SQLiteDatabase;import android.net.Uri;import android.provider.MediaStore;import android.support.annotation.NonNull;import android.support.annotation.Nullable;import android.text.TextUtils;public class MusicProvider extends ContentProvider {    public static final String AUTOHORITY = "com.lwb.music";    private static final UriMatcher matcher;    private Context context;    private MusicHelper musicHelper;    private SQLiteDatabase db;    public static final Uri MUSIC_LIKE_URI = Uri.parse("content://" + AUTOHORITY + "/" + MusicHelper.TABLE_LIKE_MUSIC);    public static final Uri MUSIC_RECENT_URI = Uri.parse("content://" + AUTOHORITY + "/" + MusicHelper.TABLE_RECENT_MUSIC);    static {        matcher = new UriMatcher(UriMatcher.NO_MATCH);        matcher.addURI(AUTOHORITY, MusicHelper.TABLE_LIKE_MUSIC, 1);        matcher.addURI(AUTOHORITY, MusicHelper.TABLE_RECENT_MUSIC, 2);    }    @Override    public boolean onCreate() {        context = getContext();        musicHelper = new MusicHelper(context);        db = musicHelper.getWritableDatabase();        return true;    }    @Nullable    @Override    public Cursor query(@NonNull Uri uri, @Nullable String[] projection, @Nullable String selection, @Nullable String[] selectionArgs, @Nullable String sortOrder) {        return db.query(getType(uri), projection, selection, selectionArgs, null, null, MediaStore.Audio.AudioColumns.DATE_MODIFIED + " DESC");    }    @Nullable    @Override    public String getType(@NonNull Uri uri) {        String tableName = null;        switch (matcher.match(uri)) {            case 1:                tableName = MusicHelper.TABLE_LIKE_MUSIC;                break;            case 2:                tableName = MusicHelper.TABLE_RECENT_MUSIC;                break;            default:                break;        }        return tableName;    }    @Nullable    @Override    public Uri insert(@NonNull Uri uri, @Nullable ContentValues values) {        String table = getType(uri);        String displayName = values.getAsString(MediaStore.Audio.AudioColumns.DISPLAY_NAME);        switch (matcher.match(uri)) {            case 1:                if (query(uri, null, MediaStore.Audio.AudioColumns.DISPLAY_NAME + "=?", new String[]{displayName}, null).getCount() == 0) {                    break;                } else {                    delete(uri, MediaStore.Audio.AudioColumns.DISPLAY_NAME + "=?", new String[]{displayName});                    return uri;                }            case 2:                if (!TextUtils.isEmpty(displayName)) {                    db.delete(table, MediaStore.Audio.AudioColumns.DISPLAY_NAME + "=?", new String[]{displayName});                }                break;        }        db.insert(table, null, values);        return uri;    }    @Override    public int delete(@NonNull Uri uri, @Nullable String selection, @Nullable String[] selectionArgs) {        return db.delete(getType(uri), selection, selectionArgs);    }    @Override    public int update(@NonNull Uri uri, @Nullable ContentValues values, @Nullable String selection, @Nullable String[] selectionArgs) {        return db.update(getType(uri), values, selection, selectionArgs);    }}