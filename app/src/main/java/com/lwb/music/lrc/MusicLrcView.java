package com.lwb.music.lrc;import android.content.Context;import android.graphics.Canvas;import android.graphics.Paint;import android.os.AsyncTask;import android.support.annotation.Nullable;import android.text.Layout;import android.text.StaticLayout;import android.text.TextPaint;import android.text.TextUtils;import android.util.AttributeSet;import android.view.Gravity;import android.view.View;import com.blankj.utilcode.util.SizeUtils;import java.util.ArrayList;import java.util.Collections;import java.util.List;public class MusicLrcView extends View {    int lrcColor = 0xff00FFFF;    int lrcCurrentColor = 0xffEE00EE;    List<LrcEntry> mLrcEntryList = new ArrayList<>();    int mOffset;    private int mTextGravity = Gravity.CENTER;    TextPaint mLrcPaint = new TextPaint();    int mCurrentTextSize = SizeUtils.dp2px(16);    public MusicLrcView(Context context) {        super(context);        init();    }    public MusicLrcView(Context context, @Nullable AttributeSet attrs) {        super(context, attrs);        init();    }    private void init() {        mLrcPaint.setAntiAlias(true);        mLrcPaint.setTextAlign(Paint.Align.LEFT);    }    public void setLrc(String lrc) {        mLrcEntryList.clear();        if (TextUtils.isEmpty(lrc)) {            onLrcLoaded(null);        } else {            new AsyncTask<String, Void, List<LrcEntry>>() {                @Override                protected List<LrcEntry> doInBackground(String... voids) {                    return LrcEntry.parseLrc(voids[0]);                }                @Override                protected void onPostExecute(List<LrcEntry> lrcEntries) {                    super.onPostExecute(lrcEntries);                    onLrcLoaded(lrcEntries);                }            }.execute(lrc);        }    }    private void onLrcLoaded(List<LrcEntry> lrcEntries) {        if (lrcEntries != null) {            mLrcEntryList.addAll(lrcEntries);            initEntryList();        }        postInvalidate();    }    private void initEntryList() {        if (!hasLrc() || getWidth() == 0) {            return;        }        Collections.sort(mLrcEntryList);        for (LrcEntry lrcEntry : mLrcEntryList) {            lrcEntry.init(mLrcPaint, getWidth(), mTextGravity);        }        mOffset = getHeight() / 2;    }    private boolean hasLrc() {        return !mLrcEntryList.isEmpty();    }    float animOffset;    int cIndex = -1;    long last;    @Override    protected void onDraw(Canvas canvas) {        super.onDraw(canvas);        float y = getHeight() / 2;        if (mLrcEntryList.isEmpty()) {            mLrcPaint.setTextSize(mCurrentTextSize * 1.3f);            mLrcPaint.setColor(lrcColor);            StaticLayout staticLayout = new StaticLayout("暂无歌词", mLrcPaint,                    getWidth(), Layout.Alignment.ALIGN_CENTER, 1f, 0f, false);            canvas.translate(0, y - staticLayout.getHeight() / 2 + animOffset);            staticLayout.draw(canvas);            return;        }        mLrcPaint.setTextSize(mCurrentTextSize);        int centerIndex = getCenterLrc(currentTime);        if (cIndex != centerIndex && centerIndex > 0) {            cIndex = centerIndex;            animOffset = mLrcEntryList.get(centerIndex - 1).getStaticLayout().getHeight();        }        for (int i = centerIndex; i < mLrcEntryList.size(); i++) {            if (i == centerIndex) {                mLrcPaint.setColor(lrcCurrentColor);            } else {                mLrcPaint.setColor(lrcColor);            }            canvas.save();            StaticLayout staticLayout = mLrcEntryList.get(i).getStaticLayout();            canvas.translate(0, y - staticLayout.getHeight() / 2 + animOffset);            staticLayout.draw(canvas);            canvas.restore();            y += staticLayout.getHeight();            if (y > getHeight()) {                break;            }        }        y = getHeight() / 2                - mLrcEntryList.get(centerIndex).getStaticLayout().getHeight()                - (centerIndex > 0 ? mLrcEntryList.get(centerIndex - 1).getStaticLayout().getHeight() : 0);        mLrcPaint.setColor(lrcColor);        for (int i = centerIndex - 1; i >= 0; i--) {            canvas.save();            StaticLayout staticLayout = mLrcEntryList.get(i).getStaticLayout();            canvas.translate(0, y + staticLayout.getHeight() / 2 + animOffset);            staticLayout.draw(canvas);            canvas.restore();            y -= staticLayout.getHeight();            if (y < -staticLayout.getHeight() * 2) {                break;            }        }        if (animOffset > 0) {            if (System.currentTimeMillis() - last > 16) {                animOffset -= getHeight() / 200f;            }            if (animOffset < 0) {                animOffset = 0;            }            invalidate();        }    }    private int getCenterLrc(int time) {        int left = 0;        int right = mLrcEntryList.size();        while (left <= right) {            int middle = (left + right) / 2;            long middleTime = mLrcEntryList.get(middle).getTime();            if (time < middleTime) {                right = middle - 1;            } else {                if (middle + 1 >= mLrcEntryList.size() || time < mLrcEntryList.get(middle + 1).getTime()) {                    return middle;                }                left = middle + 1;            }        }        return 0;    }    int currentTime;    public void setCurrentTime(int time) {        currentTime = time;        postInvalidate();    }}